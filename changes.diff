diff --git a/main.c b/main.c
index 8256a8a..34a05c0 100644
--- a/main.c
+++ b/main.c
@@ -21,6 +21,7 @@ int balance[N];
 // create a new message queue
 osMessageQueueId_t messageQueues [N];
 int messageIndices[N];
+int serverRandomSleepTime[N];
 
 // arrays to hold statistics for each message queue
 int messagesSent[N];
@@ -47,7 +48,9 @@ __NO_RETURN void server(void *q_id_void)
 	printf("server %d\n", osMessageQueueGetCapacity(q_id));
 	while(1)
 	{
-		osDelay(((next_event() * osKernelGetTickFreq()) /  averageServiceRate) >> 16);
+		int next_eventTime = next_event();
+		osDelay(((next_eventTime * osKernelGetTickFreq()) /  averageServiceRate) >> 16);
+		serverRandomSleepTime[q_id_int] += next_eventTime;
 		int msg;
 		osStatus_t status = osMessageQueueGet(q_id, &msg, 0, osWaitForever);
 		if(status == osOK)
@@ -69,6 +72,8 @@ __NO_RETURN void monitor(void *arg)
 			printf("messages_sent %d ", messagesSent[i]);
 			printf("messages_recieved %d ", messagesRecieved[i]);
 			printf("num_messages_in_queue %d", osMessageQueueGetCount(messageQueues[i]));
+			printf("avg arrival rate %.5f", ((float)messagesSent[i] / ((float)osKernelGetTickCount() / (float)osKernelGetTickFreq())));
+			printf("avg service rate %.5f", ((float)messagesRecieved[i] / (float)serverRandomSleepTime[i]));
 			printf("\n");
 		}
 		printf("\n");
